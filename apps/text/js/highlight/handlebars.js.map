{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/handlebars.js"],"names":["module","exports","hljs","BUILT_INS","IDENTIFIER_PLAIN_OR_QUOTED","begin","EXPRESSION_OR_HELPER_CALL","inherit","keywords","starts","endsWithParent","relevance","contains","BLOCK_MUSTACHE_CONTENTS","className","BASIC_MUSTACHE_CONTENTS","aliases","case_insensitive","subLanguage","skip","COMMENT","end","returnEnd"],"mappings":"oFAAAA,EAAOC,QAAU,SAAUC,GACzB,IAAIC,EAAY,CAAC,eAAgB,iHAE7BC,EAA6B,CAC/BC,MAAO,2BAGLC,EAA4BJ,EAAKK,QAAQH,EAA4B,CACvEI,SAAUL,EACVM,OAAQ,CAENC,gBAAgB,EAChBC,UAAW,EACXC,SAAU,CAACV,EAAKK,QAAQH,EAA4B,CAACO,UAAW,QAIhEE,EAA0BX,EAAKK,QAAQD,EAA2B,CACpEQ,UAAW,SAGTC,EAA0Bb,EAAKK,QAAQD,EAA2B,CAEpEK,UAAW,IAMb,MAAO,CACLK,QAAS,CAAC,MAAO,WAAY,mBAC7BC,kBAAkB,EAClBC,YAAa,MACbN,SAAU,CAPoC,CAACP,MAAO,SAAUc,MAAM,GACjB,CAACd,MAAO,eAAgBc,MAAM,GASjFjB,EAAKkB,QAAQ,UAAW,UACxBlB,EAAKkB,QAAQ,QAAS,QACtB,CAEEN,UAAW,eACXT,MAAO,iBAAkBgB,IAAK,WAC9BT,SAAU,CAACC,GACXJ,OAAQ,CAACY,IAAK,aAAcC,WAAW,EAAMJ,YAAa,QAE5D,CAEEJ,UAAW,eACXT,MAAO,aAAcgB,IAAK,WAC1BT,SAAU,CAACC,IAEb,CAEEC,UAAW,eACXT,MAAO,YAAagB,IAAK,OACzBT,SAAU,CAACC,IAEb,CAEEC,UAAW,oBACXT,MAAO,SAAUgB,IAAK,SACtBb,SAAUL,EACVS,SAAU,CAACG,IAEb,CAEED,UAAW,oBACXT,MAAO,OAAQgB,IAAK,OACpBb,SAAUL,EACVS,SAAU,CAACG","file":"highlight/handlebars.js?v=0b010ed35fd29394a752","sourcesContent":["module.exports = function (hljs) {\n  var BUILT_INS = {'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield lookup'};\n\n  var IDENTIFIER_PLAIN_OR_QUOTED = {\n    begin: /\".*?\"|'.*?'|\\[.*?\\]|\\w+/\n  };\n\n  var EXPRESSION_OR_HELPER_CALL = hljs.inherit(IDENTIFIER_PLAIN_OR_QUOTED, {\n    keywords: BUILT_INS,\n    starts: {\n      // helper params\n      endsWithParent: true,\n      relevance: 0,\n      contains: [hljs.inherit(IDENTIFIER_PLAIN_OR_QUOTED, {relevance: 0})]\n    }\n  });\n\n  var BLOCK_MUSTACHE_CONTENTS = hljs.inherit(EXPRESSION_OR_HELPER_CALL, {\n    className: 'name'\n  });\n\n  var BASIC_MUSTACHE_CONTENTS = hljs.inherit(EXPRESSION_OR_HELPER_CALL, {\n    // relevance 0 for backward compatibility concerning auto-detection\n    relevance: 0\n  });\n\n  var ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {begin: /\\\\\\{\\{/, skip: true};\n  var PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {begin: /\\\\\\\\(?=\\{\\{)/, skip: true};\n\n  return {\n    aliases: ['hbs', 'html.hbs', 'html.handlebars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/, end: /\\}\\}\\}\\}/,\n        contains: [BLOCK_MUSTACHE_CONTENTS],\n        starts: {end: /\\{\\{\\{\\{\\//, returnEnd: true, subLanguage: 'xml'}\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//, end: /\\}\\}\\}\\}/,\n        contains: [BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{[#\\/]/, end: /\\}\\}/,\n        contains: [BLOCK_MUSTACHE_CONTENTS],\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/, end: /\\}\\}\\}/,\n        keywords: BUILT_INS,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/, end: /\\}\\}/,\n        keywords: BUILT_INS,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n};"],"sourceRoot":""}