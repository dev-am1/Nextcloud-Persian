{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/yaml.js"],"names":["module","exports","hljs","STRING","className","relevance","variants","begin","end","contains","BACKSLASH_ESCAPE","case_insensitive","aliases","subLanguage","excludeBegin","excludeEnd","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","keywords","literal","C_NUMBER_RE"],"mappings":"qFAAAA,EAAOC,QAAU,SAASC,GACxB,IAsBIC,EAAS,CACXC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CAACC,MAAO,IAAKC,IAAK,KAClB,CAACD,MAAO,IAAKC,IAAK,KAClB,CAACD,MAAO,QAEVE,SAAU,CACRP,EAAKQ,iBAhBgB,CACvBN,UAAW,oBACXE,SAAU,CACR,CAAEC,MAAO,KAAQC,IAAK,MACtB,CAAED,MAAO,KAAOC,IAAK,SAiBzB,MAAO,CACLG,kBAAkB,EAClBC,QAAS,CAAC,MAAO,OAAQ,QACzBH,SAAU,CAjCF,CACRL,UAAW,OACXE,SAAU,CACR,CAAEC,MAAO,gCACT,CAAEA,MAAO,kCACT,CAAEA,MAAO,oCA8BT,CACEH,UAAW,OACXG,MAAO,UACPF,UAAW,IAEb,CAKED,UAAW,SACXG,MAAO,6DAET,CACEA,MAAO,WAAYC,IAAK,UACxBK,YAAa,OACbC,cAAc,EACdC,YAAY,EACZV,UAAW,GAEb,CACED,UAAW,OACXG,MAAO,IAAML,EAAKc,qBAEpB,CACEZ,UAAW,OACXG,MAAO,KAAOL,EAAKc,qBAErB,CACEZ,UAAW,OACXG,MAAO,IAAML,EAAKc,oBAAsB,KAE1C,CACEZ,UAAW,OACXG,MAAO,MAAQL,EAAKc,oBAAsB,KAE5C,CACEZ,UAAW,SAEbG,MAAO,eACLF,UAAW,GAEbH,EAAKe,kBACL,CACEC,cArFS,yBAsFTC,SAAU,CAACC,QAtFF,2BA0FX,CACEhB,UAAW,SACXG,MAAOL,EAAKmB,YAAc,OAE5BlB","file":"highlight/yaml.js?v=cb00cfabf2a1c91792e6","sourcesContent":["module.exports = function(hljs) {\n  var LITERALS = 'true false yes no null';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  var KEY = {\n    className: 'attr',\n    variants: [\n      { begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)' },\n      { begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)' }, //double quoted keys\n      { begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)' } //single quoted keys\n    ]\n  };\n\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { begin: '\\{\\{', end: '\\}\\}' }, // jinja templates Ansible\n      { begin: '%\\{', end: '\\}' } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/},\n      {begin: /\\S+/}\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    aliases: ['yml', 'YAML', 'yaml'],\n    contains: [\n      KEY,\n      {\n        className: 'meta',\n        begin: '^---\\s*$',\n        relevance: 10\n      },\n      { // multi line string\n        // Blocks start with a | or > followed by a newline\n        //\n        // Indentation of subsequent lines must be the same to\n        // be considered part of the block\n        className: 'string',\n        begin: '[\\\\|>]([0-9]?[+-])?[ ]*\\\\n( *)[\\\\S ]+\\\\n(\\\\2[\\\\S ]+\\\\n?)*',\n      },\n      { // Ruby/Rails erb\n        begin: '<%[%=-]?', end: '[%-]?%>',\n        subLanguage: 'ruby',\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      },\n      { // local tags\n        className: 'type',\n        begin: '!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // data type\n        className: 'type',\n        begin: '!!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // fragment id &ref\n        className: 'meta',\n        begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',\n      },\n      { // fragment reference *ref\n        className: 'meta',\n        begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n      },\n      { // array listing\n        className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '\\\\-(?=[ ]|$)',\n        relevance: 0\n      },\n      hljs.HASH_COMMENT_MODE,\n      {\n        beginKeywords: LITERALS,\n        keywords: {literal: LITERALS}\n      },\n      // numbers are any valid C-style number that\n      // sit isolated from other words\n      {\n        className: 'number',\n        begin: hljs.C_NUMBER_RE + '\\\\b'\n      },\n      STRING\n    ]\n  };\n};"],"sourceRoot":""}